<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-08T16:58:23+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Charvi Mendiratta</title><subtitle>Robotics|Programming|OpenSource</subtitle><entry><title type="html">Let’s get started !</title><link href="http://localhost:4000/week1-progress/" rel="alternate" type="text/html" title="Let’s get started !" /><published>2020-12-08T00:00:00+05:30</published><updated>2020-12-08T00:00:00+05:30</updated><id>http://localhost:4000/week1-progress</id><content type="html" xml:base="http://localhost:4000/week1-progress/">&lt;p&gt;My first task in the project is to Implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit in the git interactive rebase. This would be an alternative to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup!&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squash!&lt;/code&gt; commit which would allow the user to edit the commit (either commit message or content or both) when they create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit rather than when they rebase. And for the coming weeks I will be working on this task.&lt;/p&gt;

&lt;h3 id=&quot;work-done&quot;&gt;Work done&lt;/h3&gt;
&lt;h4 id=&quot;i-started-with-the-following&quot;&gt;I started with the following:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Setting up remote repo to push all my changes &lt;a href=&quot;https://github.com/charvi-077/git&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Completed the My first contribution &lt;a href=&quot;https://git-scm.com/docs/MyFirstContribution&quot;&gt;tutorial&lt;/a&gt; which made me more clear about the source code and also referred &lt;a href=&quot;https://git.github.io/Hacking-Git/&quot;&gt;here&lt;/a&gt; for more pointers to get started .&lt;/li&gt;
  &lt;li&gt;Setting up this website hosted on &lt;a href=&quot;https://github.com/charvi-077/charvi-077.github.io&quot;&gt;github&lt;/a&gt;, where I will weekly post my updates on the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, Phillip told me about the &lt;a href=&quot;https://github.com/google/sanitizers&quot;&gt;sanitizers&lt;/a&gt;. I enabled it in my config.mak file and learned about it, so that while building the git repo we can easily detect the address and memory leaks. In addition to this I also enable the warnings and debugging information and my config.mak looks like below :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEVELOPER = 1
CFLAGS = -ggdb3
SANITIZE = address,leak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next I spent some time in learning about the advanced linux commands including &lt;a href=&quot;https://www.howtogeek.com/438882/how-to-use-pipes-on-linux/&quot;&gt;pipes in linux&lt;/a&gt;, many other and about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git internals&lt;/code&gt; from &lt;a href=&quot;https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf&quot;&gt;here&lt;/a&gt;. Also, I referred to Pro Git to get more understanding of the git &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&quot;&gt;Plumbing and Porcelain&lt;/a&gt; commands.&lt;/p&gt;

&lt;p&gt;Then, after discussing with Christian and Phillip regarding the project and related doubts. Firstly I started with, to have an overview of the Phillip’s &lt;a href=&quot;https://github.com/phillipwood/git/commits/wip/rebase-amend&quot;&gt;patches&lt;/a&gt; which is the starting point of my task as it implements the similar amend! commit.&lt;/p&gt;

&lt;p&gt;Then I started learning about the test scripts in the patches and debugged it. All test scripts in the git give the &lt;a href=&quot;http://testanything.org&quot;&gt;TAP&lt;/a&gt; output and there are a set of helper functions defined in the test harness library (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t/test-lib.sh&lt;/code&gt;) which are used to write the test scripts . Also, I referred to t/README where everything regarding the test scripts are very well documented.&lt;/p&gt;

&lt;h4 id=&quot;points-to-consider&quot;&gt;Points to consider:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_pause&lt;/code&gt; in test scripts to look into the trash directory(which stores temporary data using testing) .&lt;/li&gt;
  &lt;li&gt;Pass –verbose(or -v) to see the output if any , –run(or -r) to run the selective tests , -i to exit upon first test fail&lt;/li&gt;
  &lt;li&gt;Pass –debug(-d), to run the command passed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_debug&lt;/code&gt; in the test script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t/lib-rebase.sh&lt;/code&gt; where more helper functions are defined, which are used in writing the tests for the interactive rebase and learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_fake_editor()&lt;/code&gt; function for setting up the fake editor while writing the test scripts.&lt;/p&gt;

&lt;h3 id=&quot;next-plans&quot;&gt;Next Plans&lt;/h3&gt;
&lt;p&gt;I will continue to work on test script, complete tests mentioned in the patches and as guided by Phillip, will look into the code for changing new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; command in the todo list to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">My first task in the project is to Implement the reword! commit in the git interactive rebase. This would be an alternative to the fixup! and squash! commit which would allow the user to edit the commit (either commit message or content or both) when they create a reword! commit rather than when they rebase. And for the coming weeks I will be working on this task.</summary></entry><entry><title type="html">Git intern in Outreachy</title><link href="http://localhost:4000/Git-Intern-in-Outreachy/" rel="alternate" type="text/html" title="Git intern in Outreachy" /><published>2020-12-05T00:00:00+05:30</published><updated>2020-12-05T00:00:00+05:30</updated><id>http://localhost:4000/Git-Intern-in-Outreachy</id><content type="html" xml:base="http://localhost:4000/Git-Intern-in-Outreachy/">&lt;p&gt;All it started with &lt;strong&gt;Open Source&lt;/strong&gt;. I always wanted to be an active open source contributor and believe that the best way to improve skills is by contributing to open source projects.&lt;/p&gt;

&lt;p&gt;So this year right after my internship as a Robotics software Intern, I decided to have a break, and focus on brushing up my software skills. Also pandemic of Covid can be one of the reasons but anyways I stick to my decision. Meanwhile I got to know that  winter Outreachy application is starting. I was aware about &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;, through my seniors since college but never applied at that time because of my engagements in other college project work. And this time I applied for it. After signing up as Outreachy applicant, we need to clear the initial application process which involves some questions about  time commitments and regarding our experiences in the tech industry.&lt;/p&gt;

&lt;p&gt;After initial application process gets cleared all we need to do is to select project, make contributions and submit the final application after discussing with mentors. I chose &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;, as it was one of my favourite commands and I just love the way everything is handled with git. For the initial contribution we can always start with good first issues, put our efforts to solve it and discuss any doubts or regarding the project we are applying for with community and mentors. The Git community has already mentioned some microprojects as well as the good first issue to start with. I picked one &lt;a href=&quot;https://lore.kernel.org/git/20201015175709.20121-1-charvi077@gmail.com/&quot;&gt;micro-project&lt;/a&gt;, worked on it and also discussed regarding the &lt;a href=&quot;https://lore.kernel.org/git/CAPSFM5e9tXx_LuwNK+e1wOjaHb6kiTCEt3WeL851KAbTPNsEow@mail.gmail.com/&quot;&gt;project&lt;/a&gt; I selected. To be frank, throughout this contribution period, you learn a lot. For me, the best thing about the initial contribution period with Git was that I learned and got experience with a traditional mailing list based project.&lt;/p&gt;

&lt;p&gt;Outreachy interns were announced  and yes I got selected to work with Git  on a project - &lt;strong&gt;“Implement drop! and reword! commits in Git interactive rebase”&lt;/strong&gt; mentored by &lt;strong&gt;Christian Couder&lt;/strong&gt; and &lt;strong&gt;Phillip Wood&lt;/strong&gt;. I thank the &lt;strong&gt;Outreachy&lt;/strong&gt;, &lt;strong&gt;Mentors&lt;/strong&gt; and &lt;strong&gt;Git community&lt;/strong&gt; for this opportunity. I am excited for working on the project as a git intern and forever as an open source contributor.&lt;/p&gt;

&lt;p&gt;Throughout my internship I will be updating my work and learnings in the coming blog series.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">All it started with Open Source. I always wanted to be an active open source contributor and believe that the best way to improve skills is by contributing to open source projects.</summary></entry></feed>