<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-09T18:34:47+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Charvi Mendiratta</title><subtitle>Robotics|Programming|OpenSource</subtitle><entry><title type="html">Week 5 - Patches for adding options to the fixup command.</title><link href="http://localhost:4000/week5-progress/" rel="alternate" type="text/html" title="Week 5 - Patches for adding options to the fixup command." /><published>2021-01-08T00:00:00+05:30</published><updated>2021-01-08T00:00:00+05:30</updated><id>http://localhost:4000/week5-progress</id><content type="html" xml:base="http://localhost:4000/week5-progress/">&lt;p&gt;Writing CLEAN CODE - CLEAN PATCHES - that are easily readable and maintainable is also an essential part. So, this week is spent mostly on fixing up the commits, commit messages, making preparatory/clean-up patches and debugging for more changes.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress&lt;/h2&gt;

&lt;p&gt;Following last week, I continued with fixing up the commits that implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; commands. After that, I started with updating the test script and replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; command on which we worked earlier, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; command. But I got stuck at parsing the multiple word command i.e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib-rebase.sh&lt;/code&gt;. I discussed with Phillip and Christian and got a pointer to make additional case for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt; options in lib-rebase.sh. Then I debugged the code again and did some changes as two tests were failing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; and also added a new test case for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Next, as guided by Christian I also split some commits and added those changes in the preparatory patches. After that added additional commits and tests for the working of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt;, following Phillip’s patches.&lt;/p&gt;

&lt;p&gt;Then after doing all the changes in the code base, tests and documentation one of the important steps before sending the patches to the mailing list, is to write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover letter&lt;/code&gt; explaining the reason and use of patches, wrote that and did the changes as guided by Christian and Phillip.&lt;/p&gt;

&lt;h4 id=&quot;git-commands-for-preparing-patches&quot;&gt;Git commands for preparing patches:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devconnected.com/how-to-create-and-apply-git-patch-files/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git format-patch&lt;/code&gt;&lt;/a&gt;, for preparing patches for email submission and include –cover-letter for adding the cover letter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://riptutorial.com/git/example/16977/use-git-send-email-with-gmail&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git send-email&lt;/code&gt;&lt;/a&gt;, for sending a collection of patches as email instead of pull requests and setting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmail&lt;/code&gt; as the smtp server.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devconnected.com/how-to-create-and-apply-git-patch-files/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git am&lt;/code&gt;&lt;/a&gt;, for applying a series of patches from mailbox and its good practise to test and apply patches locally before sending it to the mailing list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;patch-series-sent-&quot;&gt;Patch series sent :&lt;/h2&gt;
&lt;p&gt;Finally the &lt;a href=&quot;https://lore.kernel.org/git/20210108092345.2178-1-charvi077@gmail.com/T/#t&quot;&gt;patch series&lt;/a&gt; with RFC sent to the mailing list. And the work branch can be found &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup-patch-v1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;Todo&lt;/h2&gt;
&lt;p&gt;For the coming week, next task includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Debug and look into the code base of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit.c&lt;/code&gt;, to find a way out for implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; and discuss on the mailing list regarding the UI.&lt;/li&gt;
  &lt;li&gt;Look around the current implementation of Phillip’s patches of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt;, which implements it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend=&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Work on the reviews and suggestions on the patch series, sent on the mailing list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">Writing CLEAN CODE - CLEAN PATCHES - that are easily readable and maintainable is also an essential part. So, this week is spent mostly on fixing up the commits, commit messages, making preparatory/clean-up patches and debugging for more changes.</summary></entry><entry><title type="html">Week 3 &amp;amp; 4 - Digging into interactive rebase codebase</title><link href="http://localhost:4000/week3-4-progress/" rel="alternate" type="text/html" title="Week 3 &amp;amp; 4 - Digging into interactive rebase codebase" /><published>2020-12-31T00:00:00+05:30</published><updated>2020-12-31T00:00:00+05:30</updated><id>http://localhost:4000/week3-4-progress</id><content type="html" xml:base="http://localhost:4000/week3-4-progress/">&lt;p&gt;I started with, finding the answers of what happens when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; ? How does the code work after we edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-rebase-todo&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;So, I spent some time navigating the code, looking into definitions and the data structures used in the codebase. And it becomes more easy after setting up proper keybindings in the &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;vscode&lt;/a&gt;, using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jaydenlin.ctags-support&quot;&gt;ctags&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;GDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As an overview, the very first entry point is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comman-main.c&lt;/code&gt;, following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_main()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.c&lt;/code&gt;. Then in builtin folder, there is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase.c&lt;/code&gt; which consists the two functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_rebase()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_rebase__interactive()&lt;/code&gt; which are the entry points for the git rebase command which further calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_sequence_rebase()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer_continue()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, after discussing with Phillip and Christian more regarding the patches and codebase I learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer.c&lt;/code&gt; codebase that handles the working of git-rebase-todo, where entry point is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer_continue()&lt;/code&gt;, which calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_populate_todo()&lt;/code&gt; to read the todo list and then calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick_commits()&lt;/code&gt; to pick the commits, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick_commits()&lt;/code&gt; then loops through the todo list and picks each commit by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_pick_commit()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress&lt;/h2&gt;

&lt;p&gt;As started earlier, I completed the modifications in the test scripts as &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/test-script-v6&quot;&gt;here&lt;/a&gt;, but it still need to be changed simultaneously with the changes in the Phillip’s patches.
Next, after poking around the codebase I started working on changing the amend patches as &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup&quot;&gt;here&lt;/a&gt;. So, I removed the amend command from the current Phillip’s patches and added the options to the fixup command in the interactive rebase.
And changing pick command to the respective one, will work as described below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt;, work like squash but remove this commits log&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt;, work like squash but replace above commit’s message with this commit message.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt;, work like squash, replace above commit’s message with   this commit and also open the editor to edit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;points-to-consider&quot;&gt;Points to consider:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;run interactive rebase with &lt;a href=&quot;https://jnielson.com/git-rebase-with-merges&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--rebase-merges&lt;/code&gt;&lt;/a&gt;, in order to save your merge commits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git directory&lt;/code&gt;, that stores all the information&lt;/li&gt;
  &lt;li&gt;look around the &lt;a href=&quot;https://schacon.github.io/git/technical/api-strbuf.html&quot;&gt;strbuf API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;git supports so many languages, look around &lt;a href=&quot;https://www.gnu.org/software/gettext/&quot;&gt;gettext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;p&gt;I will complete the modifications required in the patches as guided by Christian, which is in &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup&quot;&gt;progress&lt;/a&gt;. Next, I need to look into its working if the commit messages are empty and will also complete the changes in the test script in accordance with the fixup command options in interactive rebase.&lt;/p&gt;

&lt;p&gt;PS: Last week I worked less, but will try to speed up and send the patch series to the mailing list asap.&lt;/p&gt;

&lt;p&gt;Thanks &amp;amp;
Happy New Year, 2k21&lt;/p&gt;</content><author><name></name></author><summary type="html">I started with, finding the answers of what happens when we run git rebase -i ? How does the code work after we edit the git-rebase-todo ?</summary></entry><entry><title type="html">Week 2 - Updates</title><link href="http://localhost:4000/week2-progress/" rel="alternate" type="text/html" title="Week 2 - Updates" /><published>2020-12-15T00:00:00+05:30</published><updated>2020-12-15T00:00:00+05:30</updated><id>http://localhost:4000/week2-progress</id><content type="html" xml:base="http://localhost:4000/week2-progress/">&lt;p&gt;Working on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;. And it’s true that we can’t just avoid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conflicts&lt;/code&gt;. Although, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; makes the merging or integration of code from different branches very easy and handles itself but there are many situations in which it results in merge conflicts and at that time it is required to be solved manually.&lt;/p&gt;

&lt;p&gt;The most common case is when there is a change in the same file at the same line in  two different branches and if we merge these two branches, then git can’t decide which line to keep and mark the conflict in the file and we need to resolve that manually. So keep calm, dig deep and solve the conflicts.&lt;/p&gt;

&lt;h2 id=&quot;progress-&quot;&gt;Progress :&lt;/h2&gt;
&lt;p&gt;This week, I also got messed up with merge conflicts but the only way out is to deal with it. I looked into tests written and discussed with Phillip regarding the previous written tests (in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t3437-rebase-amend.sh&lt;/code&gt;) as I got stuck with those conflicts defined in the test script. Also I found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff3&lt;/code&gt; conflict marker, very useful to solve the conflicts easily as it tells about the common ancestor of the merge also. I looked into detail from &lt;a href=&quot;https://www.git-scm.com/book/en/v2/Git-Tools-Advanced-Merging&quot;&gt;here&lt;/a&gt;. We can easily regenerate the conflict marks in the file, which gives the conflicting error to be solved manually (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout --conflict=diff3 file-name&lt;/code&gt;) or can set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff3&lt;/code&gt; as default config style (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global merge.conflictstyle diff3&lt;/code&gt;). Also Christian guided to break the large patch series into the smaller one and work on different features in different branches which is also helpful to reduce the conflicts.&lt;/p&gt;

&lt;h4 id=&quot;some-more-points-to-consider-&quot;&gt;Some more points to consider :&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt;, &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&quot;&gt;interactive rebase&lt;/a&gt; to rewrite the commit history but preferred for local changes only.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;, which saved me many times, using this we can easily move back and forth in git history and can even easily undo the git reset.&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt; to move commits from one branch to another.&lt;/li&gt;
  &lt;li&gt;customize the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;, use &lt;a href=&quot;https://www.git-scm.com/docs/git-log&quot;&gt;pretty formats&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, I spent some time learning about the shell scripts from &lt;a href=&quot;https://www.kau.edu.sa/files/830/files/60761_linux.pdf&quot;&gt;here&lt;/a&gt; as it made me more clear about the functions used in the test libraries (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test-lib.sh&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test-lib-functions.sh&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib-rebase.sh&lt;/code&gt;). I have completed the todo tests (to check if first amend commented out in sequence fixup amend amend). Also as guided by mentors I am working on some modifications required in the test script. Next I have also started looking into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer.c&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase-interactive.c&lt;/code&gt; and currently going through the changes done in the patch files (to add new command rebase in the patches) to collect some pointers.&lt;/p&gt;

&lt;h2 id=&quot;next-plans&quot;&gt;Next Plans&lt;/h2&gt;
&lt;p&gt;I will complete the modifications required in the test script and will work on changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt; command in interactive rebase to have options of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">Working on git using git. And it’s true that we can’t just avoid the conflicts. Although, git makes the merging or integration of code from different branches very easy and handles itself but there are many situations in which it results in merge conflicts and at that time it is required to be solved manually.</summary></entry><entry><title type="html">Let’s get started !</title><link href="http://localhost:4000/week1-progress/" rel="alternate" type="text/html" title="Let’s get started !" /><published>2020-12-08T00:00:00+05:30</published><updated>2020-12-08T00:00:00+05:30</updated><id>http://localhost:4000/week1-progress</id><content type="html" xml:base="http://localhost:4000/week1-progress/">&lt;p&gt;My first task in the project is to Implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit in the git interactive rebase. This would be an alternative to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup!&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squash!&lt;/code&gt; commit which would allow the user to edit the commit (either commit message or content or both) when they create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit rather than when they rebase. And for the coming weeks I will be working on this task.&lt;/p&gt;

&lt;h3 id=&quot;work-done&quot;&gt;Work done&lt;/h3&gt;
&lt;h4 id=&quot;i-started-with-the-following&quot;&gt;I started with the following:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Setting up remote repo to push all my changes &lt;a href=&quot;https://github.com/charvi-077/git&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Completed the My first contribution &lt;a href=&quot;https://git-scm.com/docs/MyFirstContribution&quot;&gt;tutorial&lt;/a&gt; which made me more clear about the source code and also referred &lt;a href=&quot;https://git.github.io/Hacking-Git/&quot;&gt;here&lt;/a&gt; for more pointers to get started .&lt;/li&gt;
  &lt;li&gt;Setting up this website hosted on &lt;a href=&quot;https://github.com/charvi-077/charvi-077.github.io&quot;&gt;github&lt;/a&gt;, where I will weekly post my updates on the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, Phillip told me about the &lt;a href=&quot;https://github.com/google/sanitizers&quot;&gt;sanitizers&lt;/a&gt;. I enabled it in my config.mak file and learned about it, so that while building the git repo we can easily detect the address and memory leaks. In addition to this I also enable the warnings and debugging information and my config.mak looks like below :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEVELOPER = 1
CFLAGS = -ggdb3
SANITIZE = address,leak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next I spent some time in learning about the advanced linux commands including &lt;a href=&quot;https://www.howtogeek.com/438882/how-to-use-pipes-on-linux/&quot;&gt;pipes in linux&lt;/a&gt;, many other and about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git internals&lt;/code&gt; from &lt;a href=&quot;https://github.com/pluralsight/git-internals-pdf/releases/download/v2.0/peepcode-git.pdf&quot;&gt;here&lt;/a&gt;. Also, I referred to Pro Git to get more understanding of the git &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&quot;&gt;Plumbing and Porcelain&lt;/a&gt; commands.&lt;/p&gt;

&lt;p&gt;Then, after discussing with Christian and Phillip regarding the project and related doubts. Firstly I started with, to have an overview of the Phillip’s &lt;a href=&quot;https://github.com/phillipwood/git/commits/wip/rebase-amend&quot;&gt;patches&lt;/a&gt; which is the starting point of my task as it implements the similar amend! commit.&lt;/p&gt;

&lt;p&gt;Then I started learning about the test scripts in the patches and debugged it. All test scripts in the git give the &lt;a href=&quot;http://testanything.org&quot;&gt;TAP&lt;/a&gt; output and there are a set of helper functions defined in the test harness library (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t/test-lib.sh&lt;/code&gt;) which are used to write the test scripts . Also, I referred to t/README where everything regarding the test scripts are very well documented.&lt;/p&gt;

&lt;h4 id=&quot;points-to-consider&quot;&gt;Points to consider:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_pause&lt;/code&gt; in test scripts to look into the trash directory(which stores temporary data using testing) .&lt;/li&gt;
  &lt;li&gt;Pass –verbose(or -v) to see the output if any , –run(or -r) to run the selective tests , -i to exit upon first test fail&lt;/li&gt;
  &lt;li&gt;Pass –debug(-d), to run the command passed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_debug&lt;/code&gt; in the test script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t/lib-rebase.sh&lt;/code&gt; where more helper functions are defined, which are used in writing the tests for the interactive rebase and learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_fake_editor()&lt;/code&gt; function for setting up the fake editor while writing the test scripts.&lt;/p&gt;

&lt;h3 id=&quot;next-plans&quot;&gt;Next Plans&lt;/h3&gt;
&lt;p&gt;I will continue to work on test script, complete tests mentioned in the patches and as guided by Phillip, will look into the code for changing new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; command in the todo list to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">My first task in the project is to Implement the reword! commit in the git interactive rebase. This would be an alternative to the fixup! and squash! commit which would allow the user to edit the commit (either commit message or content or both) when they create a reword! commit rather than when they rebase. And for the coming weeks I will be working on this task.</summary></entry><entry><title type="html">Git intern in Outreachy</title><link href="http://localhost:4000/Git-Intern-in-Outreachy/" rel="alternate" type="text/html" title="Git intern in Outreachy" /><published>2020-12-05T00:00:00+05:30</published><updated>2020-12-05T00:00:00+05:30</updated><id>http://localhost:4000/Git-Intern-in-Outreachy</id><content type="html" xml:base="http://localhost:4000/Git-Intern-in-Outreachy/">&lt;p&gt;All it started with &lt;strong&gt;Open Source&lt;/strong&gt;. I always wanted to be an active open source contributor and believe that the best way to improve skills is by contributing to open source projects.&lt;/p&gt;

&lt;p&gt;So this year right after my internship as a Robotics software Intern, I decided to have a break, and focus on brushing up my software skills. Also pandemic of Covid can be one of the reasons but anyways I stick to my decision. Meanwhile I got to know that  winter Outreachy application is starting. I was aware about &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;, through my seniors since college but never applied at that time because of my engagements in other college project work. And this time I applied for it. After signing up as Outreachy applicant, we need to clear the initial application process which involves some questions about  time commitments and regarding our experiences in the tech industry.&lt;/p&gt;

&lt;p&gt;After initial application process gets cleared all we need to do is to select project, make contributions and submit the final application after discussing with mentors. I chose &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;, as it was one of my favourite commands and I just love the way everything is handled with git. For the initial contribution we can always start with good first issues, put our efforts to solve it and discuss any doubts or regarding the project we are applying for with community and mentors. The Git community has already mentioned some microprojects as well as the good first issue to start with. I picked one &lt;a href=&quot;https://lore.kernel.org/git/20201015175709.20121-1-charvi077@gmail.com/&quot;&gt;micro-project&lt;/a&gt;, worked on it and also discussed regarding the &lt;a href=&quot;https://lore.kernel.org/git/CAPSFM5e9tXx_LuwNK+e1wOjaHb6kiTCEt3WeL851KAbTPNsEow@mail.gmail.com/&quot;&gt;project&lt;/a&gt; I selected. To be frank, throughout this contribution period, you learn a lot. For me, the best thing about the initial contribution period with Git was that I learned and got experience with a traditional mailing list based project.&lt;/p&gt;

&lt;p&gt;Outreachy interns were announced  and yes I got selected to work with Git  on a project - &lt;strong&gt;“Implement drop! and reword! commits in Git interactive rebase”&lt;/strong&gt; mentored by &lt;strong&gt;Christian Couder&lt;/strong&gt; and &lt;strong&gt;Phillip Wood&lt;/strong&gt;. I thank the &lt;strong&gt;Outreachy&lt;/strong&gt;, &lt;strong&gt;Mentors&lt;/strong&gt; and &lt;strong&gt;Git community&lt;/strong&gt; for this opportunity. I am excited for working on the project as a git intern and forever as an open source contributor.&lt;/p&gt;

&lt;p&gt;Throughout my internship I will be updating my work and learnings in the coming blog series.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">All it started with Open Source. I always wanted to be an active open source contributor and believe that the best way to improve skills is by contributing to open source projects.</summary></entry></feed>