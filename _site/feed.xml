<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-15T18:19:10+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Charvi Mendiratta</title><subtitle>Robotics|Programming|OpenSource</subtitle><entry><title type="html">Week 12 - Outreachy Intership Completed!</title><link href="http://localhost:4000/week12-progress/" rel="alternate" type="text/html" title="Week 12 - Outreachy Intership Completed!" /><published>2021-03-02T00:00:00+05:30</published><updated>2021-03-02T00:00:00+05:30</updated><id>http://localhost:4000/week12-progress</id><content type="html" xml:base="http://localhost:4000/week12-progress/">&lt;h2 id=&quot;updates-&quot;&gt;Updates :&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;All patches got merged into the main codebase. The work could be traced as here : &lt;a href=&quot;https://github.com/git/git/commits?author=charvi-077&quot;&gt;Merged Patches &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new feature got released in Git revision 2.33 , see the detailed usuage as here : &lt;a href=&quot;https://github.blog/2021-08-16-highlights-from-git-2-33/&quot;&gt;Skip to new –fixup options : amend and reword&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Checkout our blog post of Outreachy Interenship Experiences : &lt;a href=&quot;https://about.gitlab.com/blog/2021/04/15/outreachy-sponsorship-winter-2020/?utm_medium=social&amp;amp;utm_source=twitter&amp;amp;utm_campaign=blog&quot;&gt;“Technology internships meet open source in Outreachy”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My Outreachy internship at Git over the past three months was an amazing experience. Thanks to my mentors Christian Couder and Phillip Wood, I learned a lot throughout my internship,  deepened my technical skills in Git, improved problem-solving abilities, and also learned the importance of effective collaboration. I am grateful for the supportive Git community, I look forward to applying these skills in my future endeavors.&lt;/p&gt;</content><author><name></name></author><summary type="html">Updates : All patches got merged into the main codebase. The work could be traced as here : Merged Patches The new feature got released in Git revision 2.33 , see the detailed usuage as here : Skip to new –fixup options : amend and reword Checkout our blog post of Outreachy Interenship Experiences : “Technology internships meet open source in Outreachy”</summary></entry><entry><title type="html">Week 11 - Updates!</title><link href="http://localhost:4000/week11-progress/" rel="alternate" type="text/html" title="Week 11 - Updates!" /><published>2021-02-25T00:00:00+05:30</published><updated>2021-02-25T00:00:00+05:30</updated><id>http://localhost:4000/week11-progress</id><content type="html" xml:base="http://localhost:4000/week11-progress/">&lt;p&gt;Received reviews on the previous patch series and continued working on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Implementation of &quot;drop!&quot; commit&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress:&lt;/h2&gt;
&lt;p&gt;Worked on the reviews received on the previous patch series &lt;a href=&quot;https://lore.kernel.org/git/CAPSFM5fL3_pkMNBYSXiRHzbqOwzA0SBH3NjU+zVq3Mxv7UgL4w@mail.gmail.com/T/#m72ee5cbf7bcff22788912a02849acf18cc82fb32&quot;&gt;Implementation of “amend!” commit&lt;/a&gt; (Thanks to Junio for the suggestions). Firstly, we need to improve the implementation of parsing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup_message&lt;/code&gt; to detect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt;, so instead of checking if ‘:’ occurs before ‘^’ or ‘@’, Junio suggested to add helper function that does strspn(alpha). Secondly, to remove ‘-m’ commit message option working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; suboptions, here I agree with Junio’s point that it is more expected to edit the original commit message while preparing “amend!” commit and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt; for directly appending the commit message may result in the confusion at the user end.
Next, there was a bug with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; option that was taking changes when passed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathspec&lt;/code&gt;, or with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interactive_patch&lt;/code&gt; options. So we need to add a check and error it out. Besides this there were few changes required in commit message and to update the documentation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-commit&lt;/code&gt; with above mentioned changes and also to mention about the authorship of the fixed up commit.&lt;/p&gt;

&lt;h6 id=&quot;revised-patch-series&quot;&gt;Revised patch series:&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;https://lore.kernel.org/git/20210225100855.25530-1-charvi077@gmail.com/T/#u&quot;&gt;v2 - Implementation of “amend!” commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, started working on the “drop!” commit patch series &lt;a href=&quot;https://github.com/charvi-077/git/commits/drop-patches/drop-commit&quot;&gt;workbranch&lt;/a&gt;. Till now we are able to create the “drop!” commit using command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert --drop&lt;/code&gt;. And, coming to the working of “drop!” commit upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt;, it is currently resulting in segmentation fault, maybe we need to add check if “drop!” commit is rearranged or not in rebase todo-help and still I am working on it. Next, as pointed by Phillip we also need to look for the working of the chain of the “drop!” commits, which I think to check for commit subject starting with “drop! drop” as in this case we don’t need to change the command of previous commit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt; in rebase todo-list…Work still in progress…&lt;/p&gt;

&lt;h6 id=&quot;some-related-light-readings&quot;&gt;Some related Light readings:&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert&lt;/code&gt;, &lt;a href=&quot;https://www.freecodecamp.org/news/the-ultimate-guide-to-git-reset-and-git-revert/&quot;&gt;link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;How to revert a merge commit in git, &lt;a href=&quot;https://www.johbo.com/2016/how-to-revert-a-merge-commit-in-git.html&quot;&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;todo&quot;&gt;Todo:&lt;/h2&gt;
&lt;p&gt;Will continue to work on the “drop!” commit patch series that includes to solve the bug, complete the working of “drop!” commit upon –autosquash and to add the tests and documentation for the same.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name></name></author><summary type="html">Received reviews on the previous patch series and continued working on the Implementation of &quot;drop!&quot; commit.</summary></entry><entry><title type="html">Week 10 - Patch Series Sent &amp;amp; [WIP] Implementation of “drop!” commit</title><link href="http://localhost:4000/week10-progress/" rel="alternate" type="text/html" title="Week 10 - Patch Series Sent &amp;amp; [WIP] Implementation of “drop!” commit" /><published>2021-02-17T00:00:00+05:30</published><updated>2021-02-17T00:00:00+05:30</updated><id>http://localhost:4000/week10-progress</id><content type="html" xml:base="http://localhost:4000/week10-progress/">&lt;p&gt;Last week I spent on stitching up the loose points in the prepared patches of “amend!” commit (&lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/amend-commit-v3.7&quot;&gt;workbranch&lt;/a&gt;) and finally sent it to the mailing list. After that also started with the second part of project i.e to Implement the “drop!” commit.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress:&lt;/h2&gt;
&lt;p&gt;In “amend!” commit patch series, worked on adding a check so that git deny to create “amend!” commit if the commit message body of “amend!” commit is empty. Further as suggested by Phillip, added an additional check so that it allows to create the “amend!” commit with an empty commit message body if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--allow-empty-message&lt;/code&gt; is passed with it and also updated the tests for the same (t/t7500). Besides this, worked on some more improvements in documentation and commit messages as guided by Christian and Phillip.&lt;/p&gt;

&lt;h6 id=&quot;patches-status-&quot;&gt;Patches Status :&lt;/h6&gt;

&lt;h6 id=&quot;latest-patches-under-review--commit-implementation-of-amend-commit&quot;&gt;Latest Patches (Under Review) : &lt;a href=&quot;https://lore.kernel.org/git/20210217072904.16257-1-charvi077@gmail.com/#R&quot;&gt;commit: Implementation of “amend!” commit&lt;/a&gt;&lt;/h6&gt;

&lt;h6 id=&quot;on-seen-branch-topiccmrebase-i-updates--improve-the-fixup--c---c-in-interactive-rebase&quot;&gt;On Seen Branch (topic:cm/rebase-i-updates) : &lt;a href=&quot;https://lore.kernel.org/git/20210207181439.1178-1-charvi077@gmail.com/&quot;&gt;Improve the ‘fixup [-C | -c]’ in interactive rebase&lt;/a&gt;&lt;/h6&gt;

&lt;h6 id=&quot;on-next-branch-topiccmrebase-i--rebase--i-add-options-to-fixup-command&quot;&gt;On Next Branch (topic:cm/rebase-i) : &lt;a href=&quot;https://lore.kernel.org/git/20210129182050.26143-1-charvi077@gmail.com/&quot;&gt;rebase -i: add options to fixup command&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;Next, Implementation of “drop!” commit, that addresses the issue as &lt;a href=&quot;https://github.com/gitgitgadget/git/issues/259&quot;&gt;here&lt;/a&gt;. It’s working includes - to create a “drop!” commit and also dropping the changes of the specific commit (i.e now done using &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/a&gt;). So, we can go with the suggested &lt;strong&gt;UI&lt;/strong&gt; as below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert --drop &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;that mirrors the below commands:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert -n &amp;lt;commit&amp;gt; &amp;amp;&amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m 'drop! '&quot;$(git show -s --oneline &amp;lt;commit&amp;gt;)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --autosquash&lt;/code&gt;, it will implicitly drop the specific commit and the “drop!” commit as well.&lt;/p&gt;

&lt;p&gt;Starting with the implementation I started with looking around and debugging into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revert.c&lt;/code&gt; file where we need to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drop&lt;/code&gt; option. Then traced the functions and figured out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_pick_commit()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer.c&lt;/code&gt; where we need to add the functionality of “drop!” commit and to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replay_opts&lt;/code&gt; structure to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drop&lt;/code&gt; option. And the further work is still in progress.&lt;/p&gt;

&lt;p&gt;Besides this I was also looking for &lt;strong&gt;How to fetch the complete series of patches at once from the mailing list ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One way to fetch is to download the raw patches from the mailing list and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git am&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternative, as suggested by Christian I learned about &lt;a href=&quot;https://people.kernel.org/monsieuricon/introducing-b4-and-patch-attestation&quot;&gt;b4&lt;/a&gt;, that work with code submissions in a &lt;a href=&quot;https://public-inbox.org/&quot;&gt;public-inbox&lt;/a&gt; archive and makes more easier to fetch the complete patch series using single command :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b4 am &amp;lt;message-id&amp;gt;&lt;/code&gt; - Create an mbox file of complete patch series that is ready to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-am&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To-Install&lt;/strong&gt; - Just Clone the b4 repo from &lt;a href=&quot;https://git.kernel.org/pub/scm/utils/b4/b4.git/&quot;&gt;here&lt;/a&gt; and follow the README.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link to&lt;/strong&gt; - &lt;a href=&quot;https://pypi.org/project/b4/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo-&quot;&gt;TODO :&lt;/h2&gt;
&lt;p&gt;Will continue to work on adding a new feature of “drop!” commit and in parallel work on the reviews or any suggestions on the “amend!” commit patch series.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week I spent on stitching up the loose points in the prepared patches of “amend!” commit (workbranch) and finally sent it to the mailing list. After that also started with the second part of project i.e to Implement the “drop!” commit.</summary></entry><entry><title type="html">Week 9 - Modifications</title><link href="http://localhost:4000/week9-progress/" rel="alternate" type="text/html" title="Week 9 - Modifications" /><published>2021-02-09T00:00:00+05:30</published><updated>2021-02-09T00:00:00+05:30</updated><id>http://localhost:4000/week9-progress</id><content type="html" xml:base="http://localhost:4000/week9-progress/">&lt;p&gt;U TURN in the project and worked on further improvements required in the previous patch series.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress:&lt;/h2&gt;
&lt;p&gt;Last week received some more suggestions on the &lt;a href=&quot;https://lore.kernel.org/git/20210129182050.26143-1-charvi077@gmail.com/&quot;&gt;v4-patch series&lt;/a&gt;, which includes removing a bug - need to fix datatype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; argument as it was used as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;combination of bits&lt;/code&gt; but was declared as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum todo_flag_items&lt;/code&gt;. Next it includes some fixes in the commit messages, updating the test script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t3437&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib-rebase.sh&lt;/code&gt; and some other minor fixes (Thanks to Eric Sunshine for the detailed reviews). After discussing with the mentors and on the mailing list, I updated the patches and sent a &lt;a href=&quot;https://lore.kernel.org/git/20210204190507.26487-1-charvi077@gmail.com/&quot;&gt;v5-patch series&lt;/a&gt;. Oops, that was a mistake!&lt;/p&gt;

&lt;p&gt;Here I will mention to &lt;strong&gt;keep track&lt;/strong&gt; of the patches in “What’s cooking” frequently sent by Junio to the mailing list.&lt;/p&gt;

&lt;p&gt;Now as the v4-patch series was already merged to next branch so v5 revision was of no use as changes were done with interactive rebase and instead it is required to be done incrementally on the top of merged branch &lt;a href=&quot;https://git-scm.com/docs/MyFirstContribution#after-approval&quot;&gt;Instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;command-to-find-the-tip-of-what-got-merged-in-next-&quot;&gt;Command to find the tip of what got merged in “next” :&lt;/h4&gt;

&lt;p&gt;“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --first-parent --oneline master..next&lt;/code&gt;”&lt;/p&gt;

&lt;p&gt;(Thanks to Junio for guiding in detail as &lt;a href=&quot;https://lore.kernel.org/git/xmqqmtwi1g6u.fsf@gitster.c.googlers.com/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So, this time sent a new patch series &lt;a href=&quot;https://lore.kernel.org/git/20210207181439.1178-1-charvi077@gmail.com/&quot;&gt;Patches-Improve the fixup [-C -c] in interactive rebase&lt;/a&gt; built incrementally that includes the changes of v4-patches and also some additional changes in the test script suggested by Phillip. Also received some more reviews on that and worked on updating those, below is the link of the latest patch series sent on the mailing list :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Patches:&lt;/strong&gt; &lt;a href=&quot;https://lore.kernel.org/git/20210210113650.19715-1-charvi077@gmail.com/&quot;&gt;V3-Patches-Improve the ‘fixup [-C -c]’ in interactive rebase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, while working on the reviews I got stuck and wondered &lt;em&gt;How to make different commits for different changes in the same file ?&lt;/em&gt; After discussing with mentors I got way out and learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add -p&lt;/code&gt;, &lt;a href=&quot;https://johnkary.net/blog/git-add-p-the-most-powerful-git-feature-youre-not-using-yet/&quot;&gt;git patch mode&lt;/a&gt; which is a really very powerful command. Besides this another common issue is &lt;em&gt;How to undo a git rebase ?&lt;/em&gt; Hint: use git reflog and git reset &lt;a href=&quot;https://gunnariauvinen.com/how-to-undo-a-git-rebase-and-recover-hours-of-work/&quot;&gt;Read More..&lt;/a&gt; Also, I learned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog branch_name&lt;/code&gt; usually eases out the things in comparison to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; which outputs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD reflog&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO:&lt;/h2&gt;
&lt;p&gt;Will continue to work on some more improvements in the next patch series (to be sent on the mailing list) of implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; and &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/amend-commit-v3.5&quot;&gt;here&lt;/a&gt; is the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work-branch&lt;/code&gt; of it.&lt;/p&gt;

&lt;p&gt;Thanks for reading !&lt;/p&gt;</content><author><name></name></author><summary type="html">U TURN in the project and worked on further improvements required in the previous patch series.</summary></entry><entry><title type="html">Week 8 - Preparation of next patch series!</title><link href="http://localhost:4000/week8-progress/" rel="alternate" type="text/html" title="Week 8 - Preparation of next patch series!" /><published>2021-01-31T00:00:00+05:30</published><updated>2021-01-31T00:00:00+05:30</updated><id>http://localhost:4000/week8-progress</id><content type="html" xml:base="http://localhost:4000/week8-progress/">&lt;p&gt;Last week I spent on preparing the patch series, for the implementation of amend! commit (&lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/amend-commit-v3.5&quot;&gt;work-branch&lt;/a&gt;) and about to send it on the mailing list.&lt;/p&gt;

&lt;p&gt;Currently we already have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup!&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squash!&lt;/code&gt; in git that works with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt; (&lt;a href=&quot;https://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html&quot;&gt;quick reading&lt;/a&gt;) and implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; serves the other flavour for fixing the commit. So, for that we are proposing for adding two suboptions to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup&lt;/code&gt; and both will create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; and works with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt; as below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=amend:&amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It creates an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; and allows to edit the commit message and upon rebasing  with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt; it will fixup the contents and replace the commit message of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit’s message body.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=reword:&amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It creates an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty amend! commit&lt;/code&gt; that only allows to edit the commit message and will not take any staged changes and when it is rebased with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt; it will reword the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress:&lt;/h2&gt;
&lt;p&gt;I continued with doing the changes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; option as suggested by Christian and Phillip. Next, adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; option is also similar but here it will not take any staged changes and adding some extra flag checks for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; option in function parse_and_validate_options() in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtin/commit.c&lt;/code&gt;. Currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fixup&lt;/code&gt; with options only supports the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt; option. Maybe we can extend it by allowing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--reset-author&lt;/code&gt; but for now it’s on halt. Then, worked on adding the tests(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t/t7500-*.sh&lt;/code&gt;) and updating the documentation(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-commit.txt&lt;/code&gt;) for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fixup&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Besides this, I also usually read the &lt;a href=&quot;https://git.github.io/rev_news/rev_news/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Rev News&lt;/code&gt;&lt;/a&gt;, in which my favourite part is the Developer interviews, that I always enjoy reading and is a pill of inspiration.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next:&lt;/h2&gt;
&lt;p&gt;My plan for this week is to start with the second part, implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop! commit&lt;/code&gt; and also in parallel work on the reviews or community suggestions, after sending the complete patch series which includes adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup[-C | -c]&lt;/code&gt; options in interactive rebase and implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; to the mailing list.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week I spent on preparing the patch series, for the implementation of amend! commit (work-branch) and about to send it on the mailing list.</summary></entry><entry><title type="html">Week 7 - Bug in the patch series &amp;amp; [WIP] Implementation of amend! commit</title><link href="http://localhost:4000/week7-progress/" rel="alternate" type="text/html" title="Week 7 - Bug in the patch series &amp;amp; [WIP] Implementation of amend! commit" /><published>2021-01-25T00:00:00+05:30</published><updated>2021-01-25T00:00:00+05:30</updated><id>http://localhost:4000/week7-progress</id><content type="html" xml:base="http://localhost:4000/week7-progress/">&lt;p&gt;Last week was spent debugging the patch series, solving bug, addressing the code reviews and also doing some corrections in implementation of amend! commit.&lt;/p&gt;

&lt;h2 id=&quot;progress-&quot;&gt;Progress :&lt;/h2&gt;
&lt;p&gt;I continued with the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/amend-commit-v3.1&quot;&gt;work-branch&lt;/a&gt;. Also I got stuck, as I was unable to track the extra commented lines adding to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; message body. After discussing with mentors I got a way out for this. So the reason was that I was setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_editor&lt;/code&gt; variable in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepare_to_commit()&lt;/code&gt; and it gets reset in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_and_validate_options()&lt;/code&gt; function which sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanup_mode&lt;/code&gt; other than the default one. It was a silly bug but I learned to track the bug and liked the way everything is structured in the codebase. Sometimes it gets difficult to track but it’s equally important to write readable and maintainable code and I am learning too. :)&lt;/p&gt;

&lt;p&gt;Next, received reviews on the &lt;a href=&quot;https://lore.kernel.org/git/20210119074102.21598-1-charvi077@gmail.com/&quot;&gt;v2-Patch series&lt;/a&gt;. Got some suggestions on documentation and to add the additional tests for multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; sequences in interactive rebase, to check if it opens the editor once. And here I will not forget to mention that there was a minor bug in the patch series as it was failing to open the editor for sequence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt;. Next, other changes suggested in the patch series is to simplify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject_length()&lt;/code&gt; function previously written by Phillip, I learned a way out after discussions and also to do some corrections in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t3415-rebase-autosquash.sh&lt;/code&gt; and I also admit that this time I mistook some reviews, maybe unable to think the other way and thanks Christian and Phillip for correcting me. After doing all these changes, sent the &lt;a href=&quot;https://lore.kernel.org/git/20210124170405.30583-1-charvi077@gmail.com/&quot;&gt;v3-Patch series&lt;/a&gt; to the mailing list.&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO:&lt;/h2&gt;
&lt;p&gt;This week I will continue to complete the patch series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit. Coming to implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit, some rethinking need to be done for its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User interface&lt;/code&gt; as there are two possibilities :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=reword:&amp;lt;commit&amp;gt;&lt;/code&gt; and upon autosquash it will change pick command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; (not changing to present command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; as we don’t want editor to be opened again)&lt;/li&gt;
  &lt;li&gt;make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=reword:&amp;lt;commit&amp;gt;&lt;/code&gt; and upon autosquash it will change pick command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So here both only reword any previous commit and it implies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--allow-empty&lt;/code&gt;. Any suggestions for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword!&lt;/code&gt; commit user interface?&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week was spent debugging the patch series, solving bug, addressing the code reviews and also doing some corrections in implementation of amend! commit.</summary></entry><entry><title type="html">Week 6 - Reviews and Discussions</title><link href="http://localhost:4000/week6-progress/" rel="alternate" type="text/html" title="Week 6 - Reviews and Discussions" /><published>2021-01-16T00:00:00+05:30</published><updated>2021-01-16T00:00:00+05:30</updated><id>http://localhost:4000/week6-progress</id><content type="html" xml:base="http://localhost:4000/week6-progress/">&lt;p&gt;Received reviews on the &lt;a href=&quot;https://lore.kernel.org/git/20210108092345.2178-1-charvi077@gmail.com/&quot;&gt;patch series&lt;/a&gt; sent last week to Git mailing list and also discussed regarding the implementation of next subtask.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress:&lt;/h2&gt;

&lt;p&gt;For the implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit, firstly after going through the Phillip’s patches that implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend=&amp;lt;commit&amp;gt;&lt;/code&gt; I started with looking around the codebase of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtin/commit.c&lt;/code&gt; and debugging for the variables, functions when we run command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=&amp;lt;commit&amp;gt;&lt;/code&gt; and spotted for the changes to be done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepare_to_commit()&lt;/code&gt;. Then I also spent some time learning about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse-options&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;So, the subtask to be done on the top of Phillip’s patches is to implement the different user interface of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit considering all pros and cons of the available options. And after discussing with the mentors and community on the git mailing list as &lt;a href=&quot;https://lore.kernel.org/git/CAPSFM5f+cm87N5TO3V+rJvWyrcazybNb_Zu_bJZ+sBH4N4iyow@mail.gmail.com/&quot;&gt;here&lt;/a&gt;, it’s decided to implement it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --fixup=amend/reword:&amp;lt;commit&amp;gt;&lt;/code&gt;. Also, one of the major features to select this option is that it supports the backward compatibility as guided by Phillip &lt;a href=&quot;https://lore.kernel.org/git/99b40665-45dd-6c4d-d46a-56c7dbf89568@gmail.com/&quot;&gt;here&lt;/a&gt;.
Earlier I started playing around and implementing it in different way, on the &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/amend-commit-v1&quot;&gt;work branch&lt;/a&gt; but now after discussions, I got more clear regarding the implementation and working on it.&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO:&lt;/h2&gt;

&lt;p&gt;Still some minor changes are left to be done before sending the v2 of patch series on the mailing list as pushed on the &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup-patch-v2.1&quot;&gt;work branch&lt;/a&gt;, will complete that. Next, for this week I will continue to work on implementation of the amend!/reword! commit and prepare it’s patch series.&lt;/p&gt;

&lt;h4 id=&quot;its-the-middle-of-the-internship-and-as-per-project-timelines-i-am-running-late-in-completing-the-first-task-of-implementing-reword-commit-which-could-be-replaced-as-add-amend-and-reword-options-to-the-fixup-commit-but-i-will-speed-up-and-complete-this-task-soon-also-i-am-thankful-for-the-support-from-mentors-and-the-community&quot;&gt;It’s the middle of the internship and as per project timelines I am running late in completing the first task of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Implementing reword! commit&quot;&lt;/code&gt;, which could be replaced as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Add amend! and reword! options to the fixup! commit&quot;&lt;/code&gt;. But I will speed up and complete this task soon. Also, I am thankful for the support from mentors and the community.&lt;/h4&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">Received reviews on the patch series sent last week to Git mailing list and also discussed regarding the implementation of next subtask.</summary></entry><entry><title type="html">Week 5 - Patches for adding options to the fixup command.</title><link href="http://localhost:4000/week5-progress/" rel="alternate" type="text/html" title="Week 5 - Patches for adding options to the fixup command." /><published>2021-01-08T00:00:00+05:30</published><updated>2021-01-08T00:00:00+05:30</updated><id>http://localhost:4000/week5-progress</id><content type="html" xml:base="http://localhost:4000/week5-progress/">&lt;p&gt;Writing CLEAN CODE - CLEAN PATCHES - that are easily readable and maintainable is also an essential part. So, this week is spent mostly on fixing up the commits, commit messages, making preparatory/clean-up patches and debugging for more changes.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress&lt;/h2&gt;

&lt;p&gt;Following last week, I continued with fixing up the commits that implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; commands. After that, I started with updating the test script and replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; command on which we worked earlier, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; command. But I got stuck at parsing the multiple word command i.e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib-rebase.sh&lt;/code&gt;. I discussed with Phillip and Christian and got a pointer to make additional case for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt; options in lib-rebase.sh. Then I debugged the code again and did some changes as two tests were failing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; and also added a new test case for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Next, as guided by Christian I also split some commits and added those changes in the preparatory patches. After that added additional commits and tests for the working of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend!&lt;/code&gt; commit upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt;, following Phillip’s patches.&lt;/p&gt;

&lt;p&gt;Then after doing all the changes in the code base, tests and documentation one of the important steps before sending the patches to the mailing list, is to write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover letter&lt;/code&gt; explaining the reason and use of patches, wrote that and did the changes as guided by Christian and Phillip.&lt;/p&gt;

&lt;h4 id=&quot;git-commands-for-preparing-patches&quot;&gt;Git commands for preparing patches:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devconnected.com/how-to-create-and-apply-git-patch-files/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git format-patch&lt;/code&gt;&lt;/a&gt;, for preparing patches for email submission and include –cover-letter for adding the cover letter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://riptutorial.com/git/example/16977/use-git-send-email-with-gmail&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git send-email&lt;/code&gt;&lt;/a&gt;, for sending a collection of patches as email instead of pull requests and setting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmail&lt;/code&gt; as the smtp server.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devconnected.com/how-to-create-and-apply-git-patch-files/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git am&lt;/code&gt;&lt;/a&gt;, for applying a series of patches from mailbox and its good practise to test and apply patches locally before sending it to the mailing list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;patch-series-sent-&quot;&gt;Patch series sent :&lt;/h2&gt;
&lt;p&gt;Finally the &lt;a href=&quot;https://lore.kernel.org/git/20210108092345.2178-1-charvi077@gmail.com/T/#t&quot;&gt;patch series&lt;/a&gt; with RFC sent to the mailing list. And the work branch can be found &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup-patch-v1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;Todo&lt;/h2&gt;
&lt;p&gt;For the coming week, next task includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Debug and look into the code base of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit.c&lt;/code&gt;, to find a way out for implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt; and discuss on the mailing list regarding the UI.&lt;/li&gt;
  &lt;li&gt;Look around the current implementation of Phillip’s patches of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend! commit&lt;/code&gt;, which implements it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend=&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Work on the reviews and suggestions on the patch series, sent on the mailing list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">Writing CLEAN CODE - CLEAN PATCHES - that are easily readable and maintainable is also an essential part. So, this week is spent mostly on fixing up the commits, commit messages, making preparatory/clean-up patches and debugging for more changes.</summary></entry><entry><title type="html">Week 3 &amp;amp; 4 - Digging into interactive rebase codebase</title><link href="http://localhost:4000/week3-4-progress/" rel="alternate" type="text/html" title="Week 3 &amp;amp; 4 - Digging into interactive rebase codebase" /><published>2020-12-31T00:00:00+05:30</published><updated>2020-12-31T00:00:00+05:30</updated><id>http://localhost:4000/week3-4-progress</id><content type="html" xml:base="http://localhost:4000/week3-4-progress/">&lt;p&gt;I started with, finding the answers of what happens when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; ? How does the code work after we edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-rebase-todo&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;So, I spent some time navigating the code, looking into definitions and the data structures used in the codebase. And it becomes more easy after setting up proper keybindings in the &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;vscode&lt;/a&gt;, using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jaydenlin.ctags-support&quot;&gt;ctags&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;GDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As an overview, the very first entry point is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comman-main.c&lt;/code&gt;, following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_main()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.c&lt;/code&gt;. Then in builtin folder, there is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase.c&lt;/code&gt; which consists the two functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_rebase()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd_rebase__interactive()&lt;/code&gt; which are the entry points for the git rebase command which further calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_sequence_rebase()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer_continue()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, after discussing with Phillip and Christian more regarding the patches and codebase I learned about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer.c&lt;/code&gt; codebase that handles the working of git-rebase-todo, where entry point is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer_continue()&lt;/code&gt;, which calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_populate_todo()&lt;/code&gt; to read the todo list and then calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick_commits()&lt;/code&gt; to pick the commits, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick_commits()&lt;/code&gt; then loops through the todo list and picks each commit by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_pick_commit()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;progress&quot;&gt;Progress&lt;/h2&gt;

&lt;p&gt;As started earlier, I completed the modifications in the test scripts as &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/test-script-v6&quot;&gt;here&lt;/a&gt;, but it still need to be changed simultaneously with the changes in the Phillip’s patches.
Next, after poking around the codebase I started working on changing the amend patches as &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup&quot;&gt;here&lt;/a&gt;. So, I removed the amend command from the current Phillip’s patches and added the options to the fixup command in the interactive rebase.
And changing pick command to the respective one, will work as described below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt;, work like squash but remove this commits log&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -C&lt;/code&gt;, work like squash but replace above commit’s message with this commit message.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup -c&lt;/code&gt;, work like squash, replace above commit’s message with   this commit and also open the editor to edit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;points-to-consider&quot;&gt;Points to consider:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;run interactive rebase with &lt;a href=&quot;https://jnielson.com/git-rebase-with-merges&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--rebase-merges&lt;/code&gt;&lt;/a&gt;, in order to save your merge commits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git directory&lt;/code&gt;, that stores all the information&lt;/li&gt;
  &lt;li&gt;look around the &lt;a href=&quot;https://schacon.github.io/git/technical/api-strbuf.html&quot;&gt;strbuf API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;git supports so many languages, look around &lt;a href=&quot;https://www.gnu.org/software/gettext/&quot;&gt;gettext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;p&gt;I will complete the modifications required in the patches as guided by Christian, which is in &lt;a href=&quot;https://github.com/charvi-077/git/commits/amend-patches/fixup&quot;&gt;progress&lt;/a&gt;. Next, I need to look into its working if the commit messages are empty and will also complete the changes in the test script in accordance with the fixup command options in interactive rebase.&lt;/p&gt;

&lt;p&gt;PS: Last week I worked less, but will try to speed up and send the patch series to the mailing list asap.&lt;/p&gt;

&lt;p&gt;Thanks &amp;amp;
Happy New Year, 2k21&lt;/p&gt;</content><author><name></name></author><summary type="html">I started with, finding the answers of what happens when we run git rebase -i ? How does the code work after we edit the git-rebase-todo ?</summary></entry><entry><title type="html">Week 2 - Updates</title><link href="http://localhost:4000/week2-progress/" rel="alternate" type="text/html" title="Week 2 - Updates" /><published>2020-12-15T00:00:00+05:30</published><updated>2020-12-15T00:00:00+05:30</updated><id>http://localhost:4000/week2-progress</id><content type="html" xml:base="http://localhost:4000/week2-progress/">&lt;p&gt;Working on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;. And it’s true that we can’t just avoid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conflicts&lt;/code&gt;. Although, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; makes the merging or integration of code from different branches very easy and handles itself but there are many situations in which it results in merge conflicts and at that time it is required to be solved manually.&lt;/p&gt;

&lt;p&gt;The most common case is when there is a change in the same file at the same line in  two different branches and if we merge these two branches, then git can’t decide which line to keep and mark the conflict in the file and we need to resolve that manually. So keep calm, dig deep and solve the conflicts.&lt;/p&gt;

&lt;h2 id=&quot;progress-&quot;&gt;Progress :&lt;/h2&gt;
&lt;p&gt;This week, I also got messed up with merge conflicts but the only way out is to deal with it. I looked into tests written and discussed with Phillip regarding the previous written tests (in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t3437-rebase-amend.sh&lt;/code&gt;) as I got stuck with those conflicts defined in the test script. Also I found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff3&lt;/code&gt; conflict marker, very useful to solve the conflicts easily as it tells about the common ancestor of the merge also. I looked into detail from &lt;a href=&quot;https://www.git-scm.com/book/en/v2/Git-Tools-Advanced-Merging&quot;&gt;here&lt;/a&gt;. We can easily regenerate the conflict marks in the file, which gives the conflicting error to be solved manually (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout --conflict=diff3 file-name&lt;/code&gt;) or can set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff3&lt;/code&gt; as default config style (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global merge.conflictstyle diff3&lt;/code&gt;). Also Christian guided to break the large patch series into the smaller one and work on different features in different branches which is also helpful to reduce the conflicts.&lt;/p&gt;

&lt;h4 id=&quot;some-more-points-to-consider-&quot;&gt;Some more points to consider :&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt;, &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&quot;&gt;interactive rebase&lt;/a&gt; to rewrite the commit history but preferred for local changes only.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;, which saved me many times, using this we can easily move back and forth in git history and can even easily undo the git reset.&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt; to move commits from one branch to another.&lt;/li&gt;
  &lt;li&gt;customize the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;, use &lt;a href=&quot;https://www.git-scm.com/docs/git-log&quot;&gt;pretty formats&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, I spent some time learning about the shell scripts from &lt;a href=&quot;https://www.kau.edu.sa/files/830/files/60761_linux.pdf&quot;&gt;here&lt;/a&gt; as it made me more clear about the functions used in the test libraries (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test-lib.sh&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test-lib-functions.sh&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib-rebase.sh&lt;/code&gt;). I have completed the todo tests (to check if first amend commented out in sequence fixup amend amend). Also as guided by mentors I am working on some modifications required in the test script. Next I have also started looking into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequencer.c&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase-interactive.c&lt;/code&gt; and currently going through the changes done in the patch files (to add new command rebase in the patches) to collect some pointers.&lt;/p&gt;

&lt;h2 id=&quot;next-plans&quot;&gt;Next Plans&lt;/h2&gt;
&lt;p&gt;I will complete the modifications required in the test script and will work on changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixup&lt;/code&gt; command in interactive rebase to have options of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name></name></author><summary type="html">Working on git using git. And it’s true that we can’t just avoid the conflicts. Although, git makes the merging or integration of code from different branches very easy and handles itself but there are many situations in which it results in merge conflicts and at that time it is required to be solved manually.</summary></entry></feed>